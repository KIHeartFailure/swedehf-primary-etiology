```{r}
#| label: predictorsfunc
#| cache: true
#| cache.comments: false
#| output: false

predictorsfunc <- function(data, impdata) {
  crudemod <- summary(crudemodraw <- multinom(shf_ef_cat ~ shf_primaryetiology_cat, data = data))
  crude <- tibble(
    type = "Crude",
    var = rep(colnames(crudemod$coefficients), each = 2),
    ef = rep(rownames(crudemod$coefficients), 4),
    or = c(exp(crudemod$coefficients)),
    lci = c(exp(crudemod$coefficients - global_z05 * crudemod$standard.errors)),
    uci = c(exp(crudemod$coefficients + global_z05 * crudemod$standard.errors)),
    orci = paste0(
      fn(or, 2), " (",
      fn(lci, 2), "-",
      fn(uci, 2), ")" # , "
    ),
    cols = case_when(
      lci < 1 & uci > 1 | lci > 1 & uci < 1 ~ 2,
      or >= 1 ~ 1,
      or < 1 ~ 3
    )
  ) %>%
    filter(!var %in% c("(Intercept)"))

  modvarstmp <- setdiff(modvars, "shf_ef_cat")
  adjmod <- with(impdata, multinom(formula(paste0("shf_ef_cat ~ shf_primaryetiology_cat + ", paste(modvarstmp, collapse = " + ")))))
  adjmod <- summary(pool(adjmod))
  adj <- tibble(
    type = "Adjusted",
    ef = adjmod$y.level,
    var = as.character(adjmod$term),
    or = exp(adjmod$estimate),
    lci = exp(adjmod$estimate - global_z05 * adjmod$std.error),
    uci = exp(adjmod$estimate + global_z05 * adjmod$std.error),
    # p = fn(adjmod$p.value, dig = 3, p = TRUE),
    orci = paste0(
      fn(or, 2), " (",
      fn(lci, 2), "-",
      fn(uci, 2), ")" # , ",
      # p
    ),
    cols = case_when(
      adjmod$p.value >= 0.05 ~ 2,
      or >= 1 ~ 1,
      or < 1 ~ 3
    )
  ) %>%
    filter(str_detect(var, "shf_primaryetiology_cat"))


  overall <- crude %>%
    mutate(
      type = str_remove(var, "shf_primaryetiology_cat"),
      order = 1
    ) %>%
    select(type, var, ef, order)

  both <- bind_rows(
    overall,
    crude %>% mutate(order = 2),
    adj %>% mutate(order = 3)
  ) %>%
    mutate(
      var = str_remove(var, "shf_primaryetiology_cat"),
      var = forcats::fct_inorder(var),
      cols = factor(as.character(cols), levels = c("1", "2", "3"))
    ) %>%
    group_by(ef) %>%
    arrange(var, order) %>%
    mutate(
      order = forcats::fct_rev(forcats::fct_inorder(as.character(n():1))),
      ordergrid = ifelse(type %in% c("Crude", "Adjusted"), order, NA_character_)
    ) %>%
    ungroup() %>%
    mutate(type = ifelse(type %in% c("Crude", "Adjusted"), paste0("   ", type), paste0(type, " vs ", levels(rsdata$shf_primaryetiology_cat)[1])))
}

both <- predictorsfunc(rsdata, imprsdata)
both_female <- predictorsfunc(rsdata %>% filter(shf_sex == "Female"), imprsdatafemale)
both_male <- predictorsfunc(rsdata %>% filter(shf_sex == "Male"), imprsdatamale)
```

```{r}
#| label: predictorsplotfunc
#| dependson: predictorsfunc
#| cache: true
#| cache.comments: false

predictorsplotfunc <- function(plotdata) {
  # plot it
  size_use <- 18

  # min(both$lci, na.rm = T)
  # max(both$uci, na.rm = T)

  xbreaks <- c(0.2, 0.4, 0.6, 0.8)

  p1 <- ggplot(plotdata %>% filter(ef == "HFmrEF"), aes(x = or, y = order, color = cols)) +
    # Add a reference dashed line at 1
    geom_vline(xintercept = 1, linetype = "dashed", color = "grey", linewidth = 0.6) +
    # Add dot plot and error bars
    geom_errorbar(aes(xmin = lci, xmax = uci), width = 0.3, linewidth = 0.3) +
    geom_point(size = 1.7, shape = 15) +
    scale_color_manual(values = global_cols[c(2, 1, 3)]) +
    theme_classic() +
    theme(
      text = element_text(size = size_use),
      legend.position = "none",
      axis.ticks.y = element_blank(),
      axis.title = element_blank(),
      axis.text.y = element_blank(),
      axis.line.y = element_line(colour = "white"),
      plot.margin = unit(c(0, 0, 0, 0), "mm"),
      panel.grid.major.y = element_line(colour = "grey94")
    ) +
    scale_x_continuous(trans = "log", breaks = xbreaks, limits = c(min(xbreaks), max(xbreaks))) +
    scale_y_discrete(breaks = plotdata %>% filter(ef == "HFmrEF") %>% pull(ordergrid))

  t1 <- ggplot(plotdata %>% filter(ef == "HFmrEF")) +
    geom_text(aes(y = order, x = 1, label = orci), size = size_use / .pt * 0.8) +
    theme_classic() +
    theme(
      text = element_text(size = size_use),
      legend.position = "none",
      axis.ticks.y = element_blank(),
      axis.title = element_blank(),
      axis.text.y = element_blank(),
      axis.line.y = element_line(colour = "white"),
      plot.margin = unit(c(0, 0, 0, 0), "mm"),
      axis.line.x = element_line(color = "white"),
      axis.ticks.x = element_line(color = "white"),
      axis.text.x = element_text(color = "white")
    )

  p2 <- ggplot(plotdata %>% filter(ef == "HFrEF"), aes(x = or, y = order, color = cols)) +
    # Add a reference dashed line at 1
    geom_vline(xintercept = 1, linetype = "dashed", color = "grey", linewidth = 0.6) +
    # Add dot plot and error bars
    geom_errorbar(aes(xmin = lci, xmax = uci), width = 0.3, linewidth = 0.3) +
    geom_point(size = 1.7, shape = 15) +
    scale_color_manual(values = global_cols[c(2, 1, 3)]) +
    theme_classic() +
    theme(
      text = element_text(size = size_use),
      legend.position = "none",
      axis.ticks.y = element_blank(),
      axis.title = element_blank(),
      axis.text.y = element_blank(),
      axis.line.y = element_line(colour = "white"),
      plot.margin = unit(c(0, 0, 0, 0), "mm"),
      panel.grid.major.y = element_line(colour = "grey94")
    ) +
    scale_x_continuous(trans = "log", breaks = xbreaks, limits = c(min(xbreaks), max(xbreaks))) +
    scale_y_discrete(breaks = plotdata %>% filter(ef == "HFmrEF") %>% pull(ordergrid))

  t2 <- ggplot(plotdata %>% filter(ef == "HFrEF")) +
    geom_text(aes(y = order, x = 1, label = orci), size = size_use / .pt * 0.8) +
    theme_classic() +
    theme(
      text = element_text(size = size_use),
      legend.position = "none",
      axis.ticks.y = element_blank(),
      axis.title = element_blank(),
      axis.text.y = element_blank(),
      axis.line.y = element_line(colour = "white"),
      plot.margin = unit(c(0, 0, 0, 0), "mm"),
      axis.line.x = element_line(color = "white"),
      axis.ticks.x = element_line(color = "white"),
      axis.text.x = element_text(color = "white")
    )

  labs <- ggplot(plotdata %>% filter(ef == "HFmrEF"), aes(x = or, y = order)) +
    geom_blank() +
    theme_classic() +
    theme(
      text = element_text(size = size_use),
      legend.position = "none",
      axis.ticks.y = element_blank(),
      axis.title = element_blank(),
      axis.text.y = element_text(color = "black", hjust = 0),
      axis.line.y = element_line(colour = "white"),
      plot.margin = unit(c(0, 0, 0, 0), "mm"),
      axis.line.x = element_line(color = "white"),
      axis.ticks.x = element_line(color = "white"),
      axis.text.x = element_text(color = "white")
    ) +
    scale_y_discrete(
      breaks = plotdata %>% filter(ef == "HFmrEF") %>% pull(order),
      labels = plotdata %>% filter(ef == "HFmrEF") %>% pull(type)
    )

  pall1 <- t1 + p1 +
    plot_layout(widths = c(2.5, 3)) +
    plot_annotation(
      title = "HFmrEF vs HFpEF",
      subtitle = "Odds Ratio (95% CI)",
      theme = theme(
        text = element_text(size = size_use * 0.9),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
      )
    )

  pall2 <- t2 + p2 +
    plot_layout(widths = c(2.5, 3)) +
    plot_annotation(
      title = "HFrEF vs HFpEF",
      subtitle = "Odds Ratio (95% CI)",
      theme = theme(
        text = element_text(size = size_use * 0.9),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
      )
    )

  labs <- labs +
    plot_annotation(
      title = " ",
      subtitle = " ",
      theme = theme(
        text = element_text(size = size_use * 0.9),
        plot.title = element_text(hjust = 0),
        plot.subtitle = element_text(hjust = 0),
      )
    )

  pall <- wrap_elements(labs) + wrap_elements(pall1) + wrap_elements(pall2) +
    plot_layout(nrow = 1, widths = c(3, 5, 5))

  create_pptx(pall, width = 10, height = 6)
  pall
}
```

```{r}
#| label: fig-predictors
#| cache: true
#| cache.comments: false
#| dependson: predictorsfunc, predictorsplotfunc
#| fig-cap: "Association between primary etiology and EF"
#| fig-width: 10
#| fig-height: 6

predictorsplotfunc(both)
```

```{r}
#| label: fig-predictors-female
#| cache: true
#| cache.comments: false
#| dependson: predictorsfunc, predictorsplotfunc
#| fig-cap: "Association between primary etiology and EF - Female"
#| fig-width: 10
#| fig-height: 6

predictorsplotfunc(both_female)
```

```{r}
#| label: fig-predictors-male
#| cache: true
#| cache.comments: false
#| dependson: predictorsfunc, predictorsplotfunc
#| fig-cap: "Association between primary etiology and EF - Male"
#| fig-width: 10
#| fig-height: 6

predictorsplotfunc(both_male)
```
